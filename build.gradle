buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.0-SNAPSHOT'
    }
}

apply plugin: "forge"
group = 'com.forgeessentials'
version = "2.0.pre1-SNAPSHOT"
archivesBaseName = 'ForgeEssentials'


// bamboo vars
if (!hasProperty('branch'))
{
    ext.branch = 'master'
    logger.lifecycle "SETTING BRANCH TO MASTER"
}
if (!hasProperty('buildnumber'))
{
    ext.buildnumber = 0
    logger.lifecycle "SETTING BUILDNUMBER TO 0"
}

minecraft {
    version = "1.6.4-9.11.1.960"
	assetDir = "run/assets"
    //accessTransformers += "Core/src/main/resources/feCore.at"
}

dependencies {
    // logging
    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'org.slf4j:slf4j-jdk14:1.7.5'

    // testing
    testCompile 'junit:junit:4.11'
}

allprojects {
    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'

    // define extra stuff.
    ext.asm = []
    ext.ats = []
    ext.moduleDeps = []
    ext.deps = []
    ext.defaultClient = false
    ext.defaultServer = true
	
	sourceSets.main.resources.getFiles().each { file ->
		if (file.getName().endsWith(".at") || file.getName().endsWith("_at.cfg"))
		{
			ats += file.getName();
			rootProject.minecraft.at file.getPath()
		}
	}
}

jar{
    manifest{
	attributes ("TweakClass": "com.forgeessentials.core.classloading.FETweaker") // temp until we can do something about that pesky coreloader
    }
}

subprojects {
    apply plugin: 'java'


    afterEvaluate {
        // tack on the BuildNumber
        version += '.' + buildnumber

        jar {
            // manifest generation
            manifest {
                // versions
                attributes(version: project.version, mcversion: rootProject.minecraft.version)
                // asm stuff and ATs
                attributes("FECoreASM": asm.join(' '), "FECoreAT": ats.join(' '))
                // libds and deps
                attributes ("FECoreLibsMaven": deps.join(' '))
            }
        }

        dependencies {
            // you add it to the list, il add it here
            deps.each { dep ->
                compile dep
            }

            // same for module deps
            moduleDeps.each { dep ->
                compile project(":$dep")
            }
        }

        // custom json task
        task('genJson', type: JsonTask) {
            moduleDeps = moduleDeps
            version = project.version
            mcVersion = rootProject.minecraft.version
            jarFile = { project.tasks.jar.archivePath }
            defaultClient = project.defaultClient
            defaultServer = project.defaultServer

            // HELP?
            branch = rootProject.branch
            dependsOn ":reobf"
        }

        rootProject.tasks.reobf {
            reobf(tasks.jar) { spec ->
                spec.classpath = sourceSets.main.compileClasspath
            }
        }

        // task dependency :)
        rootProject.tasks.build.dependsOn project.tasks.genJson
    }

    repositories {
        maven {
            name 'forge'
            url 'http://files.minecraftforge.net/maven'
        }
        maven {
            name "minecraft"
            url "http://s3.amazonaws.com/Minecraft.Download/libraries"
        }
        mavenCentral()
    }

    jar {
        destinationDir = new File(rootProject.getBuildDir(), 'libs')
    }

    dependencies {
        compile rootProject

        testCompile 'junit:junit:4.11'
    }
}

// ----------------------------
// JSON TASK!
// ----------------------------

// do imports
import net.minecraftforge.gradle.common.Constants

public class JsonTask extends DefaultTask
{
    @Input
    def moduleDeps = []

    @Input
    def version = ""

    @Input
    def mcVersion

    @Input
    def branch

    @Input
    def baseUrl = "dl.forgeessentials.com/modules/"

    @Input
    def defaultClient = false

    @Input
    def defaultServer = true

    @InputFile
    def jarFile

    @OutputFile
    def output = { getJarFile().getPath().replace("jar", "json") }

    @TaskAction
    def doTask()
    {
        jarFile = project.file(jarFile)

        def builder = new groovy.json.JsonBuilder()

        builder.invokeMethod(project.name, [{
                                                invokeMethod("default") {
                                                    client defaultClient
                                                    server defaultServer
                                                }
                                                invokeMethod(mcVersion) {
                                                    invokeMethod(branch) {
                                                        files {
                                                            filename jarFile.getName()
                                                            url baseUrl + jarFile.getName()
                                                            hash Constants.hash(jarFile)
                                                        }
                                                        dependencies moduleDeps
                                                    }
                                                }
                                            }])

        project.file(output).write builder.toPrettyString()
    }

    File getJarFile()
    {
        return project.file(jarFile)
    }

    File getOutput()
    {
        return project.file(output)
    }
}
